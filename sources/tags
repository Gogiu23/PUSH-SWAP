!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ft_aissorted	ft_checks_args.c	/^void	ft_aissorted(char **argv)$/;"	f
ft_array_generator	ft_array_generator.c	/^t_stack	ft_array_generator(int argc, int i, int count, char **argv)$/;"	f
ft_array_plus	ft_array_generator.c	/^t_stack	ft_array_plus(int argc)$/;"	f
ft_assign_alias_a	ft_array_generator.c	/^t_stack	ft_assign_alias_a(t_stack *a)$/;"	f
ft_assign_alias_b	ft_array_generator.c	/^t_stack	ft_assign_alias_b(t_stack *b)$/;"	f
ft_checks_args	ft_checks_args.c	/^void	ft_checks_args(int argc, char **argv)$/;"	f
ft_checks_duplicates	ft_checks_args.c	/^void	ft_checks_duplicates(char **argv)$/;"	f
ft_checks_ints	ft_checks_ints.c	/^void	ft_checks_ints(t_stack a, int argc)$/;"	f
ft_coming_back	ft_sort_till_hundred.c	/^void	ft_coming_back(t_stack *a, t_stack *b)$/;"	f
ft_coming_back_again	ft_sort_beyond_hundred.c	/^void	ft_coming_back_again(t_stack *a, t_stack *b)$/;"	f
ft_error	ft_error.c	/^void	ft_error(char *c)$/;"	f
ft_free	ft_free_mem.c	/^int	ft_free(t_stack a, int argc)$/;"	f
ft_go_down	ft_smart_rotate_plus.c	/^void	ft_go_down(t_stack *a, t_stack *b, int i)$/;"	f
ft_go_up	ft_smart_rotate_plus.c	/^void	ft_go_up(t_stack *a, t_stack *b, int i)$/;"	f
ft_pa	ft_pa.c	/^void	ft_pa(t_stack *a, t_stack *b)$/;"	f
ft_pb	ft_pb.c	/^void	ft_pb(t_stack *a, t_stack *b)$/;"	f
ft_print_stack	ft_print_stack.c	/^void	ft_print_stack(t_stack *a, t_stack *b)$/;"	f
ft_ra	ft_ra.c	/^void	ft_ra(t_stack *a)$/;"	f
ft_rb	ft_rb.c	/^void	ft_rb(t_stack *b)$/;"	f
ft_remode_stacka	ft_pb.c	/^t_stack	ft_remode_stacka(t_stack a)$/;"	f
ft_remode_stackb	ft_pa.c	/^t_stack	ft_remode_stackb(t_stack b)$/;"	f
ft_rr	ft_rr.c	/^void	ft_rr(t_stack *a, t_stack *b)$/;"	f
ft_rra	ft_rra.c	/^void	ft_rra(t_stack *a)$/;"	f
ft_rrb	ft_rrb.c	/^void	ft_rrb(t_stack *b)$/;"	f
ft_rrr	ft_rrr.c	/^void	ft_rrr(t_stack *a, t_stack *b)$/;"	f
ft_sa	ft_sa.c	/^void	ft_sa(t_stack *a)$/;"	f
ft_sb	ft_sb.c	/^void	ft_sb(t_stack b)$/;"	f
ft_second_rr	ft_rr.c	/^void	ft_second_rr(t_stack b)$/;"	f
ft_second_rrr	ft_rrr.c	/^void	ft_second_rrr(t_stack b)$/;"	f
ft_smart_rotate_a	ft_smart_rotate.c	/^void	ft_smart_rotate_a(t_stack *a, int rows)$/;"	f
ft_smart_rotate_b	ft_smart_rotate.c	/^void	ft_smart_rotate_b(t_stack *b, int rows)$/;"	f
ft_smart_rotate_plus_b	ft_smart_rotate_plus.c	/^void	ft_smart_rotate_plus_b(t_stack *a, t_stack *b, int rows)$/;"	f
ft_sort_beyond_hundred	ft_sort_beyond_hundred.c	/^void	ft_sort_beyond_hundred(t_stack *a, t_stack *b)$/;"	f
ft_sort_five	ft_sort.c	/^void	ft_sort_five(t_stack *a, t_stack *b, int i)$/;"	f
ft_sort_four	ft_sort.c	/^void	ft_sort_four(t_stack *a, t_stack *b, int i)$/;"	f
ft_sort_three	ft_sort.c	/^void	ft_sort_three(t_stack *a)$/;"	f
ft_sort_till_five	ft_sort.c	/^void	ft_sort_till_five(t_stack *a, t_stack *b, int i, int argc)$/;"	f
ft_sort_till_hundred	ft_sort_till_hundred.c	/^void	ft_sort_till_hundred(t_stack *a, t_stack *b)$/;"	f
ft_sort_two	ft_sort.c	/^void	ft_sort_two(t_stack *a)$/;"	f
main	push_swap.c	/^int	main(int argc, char **argv)$/;"	f
