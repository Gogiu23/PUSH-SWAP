!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BLACK	libft/Makefile	/^BLACK			=	\\033[0;30m$/;"	m
BLACK	makefile	/^BLACK		=\\034[0;30m$/;"	m
BLUE	libft/Makefile	/^BLUE			=	\\033[0;34m$/;"	m
BLUE	makefile	/^BLUE		=	\\033[0;34m$/;"	m
BUFFER_SIZE	libft/get_next_line_bonus.h	16;"	d
CC	libft/Makefile	/^CC 				= gcc$/;"	m
CC	makefile	/^CC					= gcc$/;"	m
CFLAGS	libft/Makefile	/^CFLAGS 			= -Wall -Wextra -Werror -O3 -Ofast -flto -march=native -ffast-math$/;"	m
CFLAGS	makefile	/^CFLAGS				= -Wall -Wextra -Werror -g -MMD -MP$/;"	m
CYAN	libft/Makefile	/^CYAN			=	\\033[0;36m$/;"	m
CYAN	makefile	/^CYAN		=	\\033[0;36m$/;"	m
DARK_GRAY	libft/Makefile	/^DARK_GRAY		=	\\033[1;30m$/;"	m
DARK_GRAY	makefile	/^DARK_GRAY	=	\\033[1;30m$/;"	m
DEPS	makefile	/^DEPS				= $(SOURCES:.c=.d)$/;"	m
DEPS_BONUS	makefile	/^DEPS_BONUS			=$(SOURCES_BONUS:.c=.d)$/;"	m
GET_NEXT_LINE_BONUS_H	libft/get_next_line_bonus.h	13;"	d
GREEN	libft/Makefile	/^GREEN			=	\\033[0;32m$/;"	m
GREEN	makefile	/^GREEN		=	\\033[0;32m$/;"	m
INCLUDE_PATH	libft/Makefile	/^INCLUDE_PATH	= .\/$/;"	m
INCLUDE_PATH	makefile	/^INCLUDE_PATH		= .\/includes$/;"	m
INCLUDE_PATH_BONUS	makefile	/^INCLUDE_PATH_BONUS	=.\/includes_bonus$/;"	m
LIBFTPRINTF_H	libft/libftprintf.h	13;"	d
LIBFT_CHECKS_H	libft/libft_checks.h	13;"	d
LIBFT_CONVERSE_H	libft/libft_converse.h	13;"	d
LIBFT_H	libft/libft.h	14;"	d
LIBFT_LIST_H	libft/libft_list.h	13;"	d
LIBFT_MEMORY_H	libft/libft_memory.h	13;"	d
LIBFT_PUTS_H	libft/libft_puts.h	13;"	d
LIBFT_STRINGS_H	libft/libft_strings.h	13;"	d
LIB_DIR	makefile	/^LIB_DIR				= .\/libft$/;"	m
LIGHT_BLUE	libft/Makefile	/^LIGHT_BLUE		=	\\033[1;34m$/;"	m
LIGHT_BLUE	makefile	/^LIGHT_BLUE	=	\\033[1;34m$/;"	m
LIGHT_CYAN	libft/Makefile	/^LIGHT_CYAN		=	\\033[1;36m$/;"	m
LIGHT_CYAN	makefile	/^LIGHT_CYAN	=	\\033[1;36m$/;"	m
LIGHT_GRAY	libft/Makefile	/^LIGHT_GRAY		=	\\033[0;37m$/;"	m
LIGHT_GRAY	makefile	/^LIGHT_GRAY	=	\\033[0;37m$/;"	m
LIGHT_GREEN	libft/Makefile	/^LIGHT_GREEN		=	\\033[1;32m$/;"	m
LIGHT_GREEN	makefile	/^LIGHT_GREEN	=	\\033[1;32m$/;"	m
LIGHT_PURPLE	libft/Makefile	/^LIGHT_PURPLE	=	\\033[1;35m$/;"	m
LIGHT_PURPLE	makefile	/^LIGHT_PURPLE=	\\033[1;35m$/;"	m
LIGHT_RED	libft/Makefile	/^LIGHT_RED		=	\\033[1;31m$/;"	m
LIGHT_RED	makefile	/^LIGHT_RED	=	\\033[1;31m$/;"	m
MAKE_LIB	makefile	/^MAKE_LIB			= libft\/libft.a$/;"	m
MD	makefile	/^MD					= mkdir -p$/;"	m
MKFL	makefile	/^MKFL				= makefile$/;"	m
NAME	libft/Makefile	/^NAME 			= libft.a$/;"	m
NAME	makefile	/^NAME				= push_swap$/;"	m
NAME_BONUS	makefile	/^NAME_BONUS			= checker$/;"	m
NO_COLOR	libft/Makefile	/^NO_COLOR		=	\\033[0m$/;"	m
NO_COLOR	makefile	/^NO_COLOR	=	\\033[0m$/;"	m
OBJS	libft/Makefile	/^OBJS 			= $(SOURCES:.c=.o)$/;"	m
OBJS	makefile	/^OBJS				= $(SOURCES:.c=.o)$/;"	m
OBJS_BONUS	makefile	/^OBJS_BONUS			=$(SOURCES_BONUS:.c=.o)$/;"	m
ORANGE	libft/Makefile	/^ORANGE			=	\\033[0;33m$/;"	m
ORANGE	makefile	/^ORANGE		=	\\033[0;33m$/;"	m
PURPLE	libft/Makefile	/^PURPLE			=	\\033[0;35m$/;"	m
PURPLE	makefile	/^PURPLE		=	\\033[0;35m$/;"	m
PUSH_SWAP_BONUS_H	includes_bonus/push_swap_bonus.h	14;"	d
PUSH_SWAP_H	includes/push_swap.h	14;"	d
RED	libft/Makefile	/^RED				=	\\033[0;31m$/;"	m
RED	makefile	/^RED	 		=	\\033[0;31m$/;"	m
RM	libft/Makefile	/^RM	 			= rm -f$/;"	m
RM	makefile	/^RM					= rm -rf$/;"	m
WHITE	libft/Makefile	/^WHITE			=	\\033[1;37m$/;"	m
WHITE	makefile	/^WHITE		=	\\033[1;37m$/;"	m
YELLOW	libft/Makefile	/^YELLOW			=	\\033[1;33m$/;"	m
YELLOW	makefile	/^YELLOW		=	\\033[1;33m$/;"	m
content	libft/libft_list.h	/^	void			*content;$/;"	m	struct:s_list
counter_words	libft/ft_split.c	/^static	size_t	counter_words(const char *str, char c)$/;"	f	file:
ft2_strlen	libft/get_next_line_utils_bonus.c	/^size_t	ft2_strlen(char *str)$/;"	f
ft_aissorted	sources/ft_checks_args.c	/^void	ft_aissorted(char **argv)$/;"	f
ft_array_generator	sources/ft_array_generator.c	/^t_stack	ft_array_generator(int argc, int i, int count, char **argv)$/;"	f
ft_array_generator_bonus	sources_bonus/ft_array_generator_bonus.c	/^t_stack	ft_array_generator_bonus(int argc, int i, int count, char **argv)$/;"	f
ft_array_plus	sources/ft_array_generator.c	/^t_stack	ft_array_plus(int argc)$/;"	f
ft_array_plus_bonus	sources_bonus/ft_array_generator_bonus.c	/^t_stack	ft_array_plus_bonus(int argc)$/;"	f
ft_assign_alias_a	sources/ft_array_generator.c	/^t_stack	ft_assign_alias_a(t_stack *a)$/;"	f
ft_assign_alias_a_bonus	sources_bonus/ft_array_generator_bonus.c	/^t_stack	ft_assign_alias_a_bonus(t_stack *a)$/;"	f
ft_assign_alias_b	sources/ft_array_generator.c	/^t_stack	ft_assign_alias_b(t_stack *b)$/;"	f
ft_assign_alias_b_bonus	sources_bonus/ft_array_generator_bonus.c	/^t_stack	ft_assign_alias_b_bonus(t_stack *b)$/;"	f
ft_atoi	libft/ft_atoi.c	/^int	ft_atoi(const char *str)$/;"	f
ft_atoi_plus	libft/ft_atoi_plus.c	/^long	ft_atoi_plus(const char *str)$/;"	f
ft_bzero	libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	libft/ft_calloc.c	/^void	*ft_calloc(size_t count, size_t size)$/;"	f
ft_check_arg_atoi	libft/ft_atoi_plus.c	/^void	ft_check_arg_atoi(const char *str, long result, int i)$/;"	f
ft_check_commands	sources_bonus/ft_check_commands_bonus.c	/^void	ft_check_commands(char *command, t_stack *a, t_stack *b)$/;"	f
ft_checks_args	sources/ft_checks_args.c	/^void	ft_checks_args(int argc, char **argv)$/;"	f
ft_checks_args_bonus	sources_bonus/ft_checks_args_bonus.c	/^void	ft_checks_args_bonus(int argc, char **argv)$/;"	f
ft_checks_duplicates	sources/ft_checks_args.c	/^void	ft_checks_duplicates(char **argv)$/;"	f
ft_checks_duplicates_bonus	sources_bonus/ft_checks_args_bonus.c	/^void	ft_checks_duplicates_bonus(char **argv)$/;"	f
ft_checks_ints_bonus	sources_bonus/ft_checks_ints_bonus.c	/^void	ft_checks_ints_bonus(t_stack a, int argc)$/;"	f
ft_checks_stacks_bonus	sources_bonus/ft_check_commands_bonus.c	/^void	ft_checks_stacks_bonus(t_stack *a, t_stack *b)$/;"	f
ft_coming_back	sources/ft_sort_till_hundred.c	/^void	ft_coming_back(t_stack *a, t_stack *b)$/;"	f
ft_coming_back_again	sources/ft_sort_beyond_hundred.c	/^void	ft_coming_back_again(t_stack *a, t_stack *b)$/;"	f
ft_convertx	libft/ft_convertx.c	/^int	ft_convertx(unsigned int num, int base, int mode)$/;"	f
ft_countnbr	libft/ft_itoa.c	/^static	int	ft_countnbr(int n)$/;"	f	file:
ft_doitoa	libft/ft_itoa.c	/^static	char	*ft_doitoa(int n, char *dest, int counter)$/;"	f	file:
ft_domall	libft/ft_split.c	/^static char	**ft_domall(char *s, char c, char **dest)$/;"	f	file:
ft_error	sources/ft_error.c	/^void	ft_error(char *c)$/;"	f
ft_error_bonus	sources_bonus/ft_error_bonus.c	/^void	ft_error_bonus(char *c)$/;"	f
ft_free	libft/ft_split.c	/^static char	*ft_free(char *dest, char **supdest, int g)$/;"	f	file:
ft_free	sources/ft_free_mem.c	/^int	ft_free(t_stack *a, int argc)$/;"	f
ft_free_bonus	sources_bonus/ft_free_bonus.c	/^int	ft_free_bonus(t_stack *a)$/;"	f
ft_free_stacks_a	sources/ft_free_mem.c	/^void	ft_free_stacks_a(t_stack *a)$/;"	f
ft_free_stacks_a_bonus	sources_bonus/ft_free_bonus.c	/^void	ft_free_stacks_a_bonus(t_stack *a)$/;"	f
ft_free_stacks_b	sources/ft_free_mem.c	/^void	ft_free_stacks_b(t_stack *b)$/;"	f
ft_free_stacks_b_bonus	sources_bonus/ft_free_bonus.c	/^void	ft_free_stacks_b_bonus(t_stack *b)$/;"	f
ft_getlines	libft/get_next_line_bonus.c	/^char	*ft_getlines(char *ptr)$/;"	f
ft_go_down	sources/ft_smart_rotate_plus.c	/^void	ft_go_down(t_stack *a, t_stack *b, int i)$/;"	f
ft_go_up	sources/ft_smart_rotate_plus.c	/^void	ft_go_up(t_stack *a, t_stack *b, int i)$/;"	f
ft_isalnum	libft/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalpha	libft/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	libft/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isdigit	libft/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_isprint	libft/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_itoa	libft/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f
ft_lstadd_back	libft/ft_lstadd_back_bonus.c	/^void	ft_lstadd_back(t_list **lst, t_list *new_list)$/;"	f
ft_lstadd_front	libft/ft_lstadd_front_bonus.c	/^void	ft_lstadd_front(t_list **lst, t_list *new_list)$/;"	f
ft_lstclear	libft/ft_lstclear_bonus.c	/^void	ft_lstclear(t_list **lst, void (*del)(void *))$/;"	f
ft_lstdelone	libft/ft_lstdelone_bonus.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void *))$/;"	f
ft_lstiter	libft/ft_lstiter_bonus.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f
ft_lstlast	libft/ft_lstlast_bonus.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f
ft_lstmap	libft/ft_lstmap_bonus.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f
ft_lstnew	libft/ft_lstnew_bonus.c	/^t_list	*ft_lstnew(void *content)$/;"	f
ft_lstsize	libft/ft_lstsize_bonus.c	/^int	ft_lstsize(t_list *lst)$/;"	f
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	libft/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	libft/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, size_t n)$/;"	f
ft_memmove	libft/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f
ft_newptr	libft/get_next_line_bonus.c	/^char	*ft_newptr(char *ptr)$/;"	f
ft_pa	sources/ft_pa.c	/^void	ft_pa(t_stack *a, t_stack *b)$/;"	f
ft_pa_bonus	sources_bonus/ft_pa_bonus.c	/^void	ft_pa_bonus(t_stack *a, t_stack *b)$/;"	f
ft_pb	sources/ft_pb.c	/^void	ft_pb(t_stack *a, t_stack *b)$/;"	f
ft_pb_bonus	sources_bonus/ft_pb_bonus.c	/^void	ft_pb_bonus(t_stack *a, t_stack *b)$/;"	f
ft_print_stack	sources/ft_print_stack.c	/^void	ft_print_stack(t_stack *a, t_stack *b)$/;"	f
ft_print_stack	sources_bonus/ft_print_stack.c	/^void	ft_print_stack(t_stack *a, t_stack *b)$/;"	f
ft_printf	libft/ft_printf.c	/^int	ft_printf(char const *src, ...)$/;"	f
ft_ptr	libft/ft_ptr.c	/^int	ft_ptr(unsigned long long strike, int nextbase)$/;"	f
ft_putchar	libft/ft_putchar.c	/^int	ft_putchar(const char c)$/;"	f
ft_putchar2	libft/ft_putnbr_fd.c	/^static	void	ft_putchar2(char c, int fd)$/;"	f	file:
ft_putchar_fd	libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_putnbr	libft/ft_putnbr.c	/^int	ft_putnbr(int n, int counter)$/;"	f
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putnbr_u	libft/ft_putnbr_u.c	/^int	ft_putnbr_u(unsigned int n, int counter)$/;"	f
ft_putstr	libft/ft_putstr.c	/^int	ft_putstr(const char *s)$/;"	f
ft_putstr_error	libft/ft_putstr_error.c	/^int	ft_putstr_error(const char *s)$/;"	f
ft_putstr_fd	libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f
ft_ra	sources/ft_ra.c	/^void	ft_ra(t_stack *a)$/;"	f
ft_ra_bonus	sources_bonus/ft_ra_bonus.c	/^void	ft_ra_bonus(t_stack *a)$/;"	f
ft_rb	sources/ft_rb.c	/^void	ft_rb(t_stack *b)$/;"	f
ft_rb_bonus	sources_bonus/ft_rb_bonus.c	/^void	ft_rb_bonus(t_stack *b)$/;"	f
ft_read_line	libft/get_next_line_bonus.c	/^char	*ft_read_line(char *ptr, int fd)$/;"	f
ft_realconvert	libft/ft_convertx.c	/^static int	ft_realconvert(char *buffer, int i)$/;"	f	file:
ft_realptr	libft/ft_ptr.c	/^static int	ft_realptr(char *newbuff, int i)$/;"	f	file:
ft_remode_stacka	sources/ft_pb.c	/^void	ft_remode_stacka(t_stack *a)$/;"	f
ft_remode_stacka_bonus	sources_bonus/ft_pb_bonus.c	/^void	ft_remode_stacka_bonus(t_stack *a)$/;"	f
ft_remode_stackb	sources/ft_pa.c	/^void	ft_remode_stackb(t_stack *b)$/;"	f
ft_remode_stackb_bonus	sources_bonus/ft_pa_bonus.c	/^void	ft_remode_stackb_bonus(t_stack *b)$/;"	f
ft_rr	sources/ft_rr.c	/^void	ft_rr(t_stack *a, t_stack *b)$/;"	f
ft_rr_bonus	sources_bonus/ft_rr_bonus.c	/^void	ft_rr_bonus(t_stack *a, t_stack *b)$/;"	f
ft_rra	sources/ft_rra.c	/^void	ft_rra(t_stack *a)$/;"	f
ft_rra_bonus	sources_bonus/ft_rra_bonus.c	/^void	ft_rra_bonus(t_stack *a)$/;"	f
ft_rrb	sources/ft_rrb.c	/^void	ft_rrb(t_stack *b)$/;"	f
ft_rrb_bonus	sources_bonus/ft_rrb_bonus.c	/^void	ft_rrb_bonus(t_stack *b)$/;"	f
ft_rrr	sources/ft_rrr.c	/^void	ft_rrr(t_stack *a, t_stack *b)$/;"	f
ft_rrr_bonus	sources_bonus/ft_rrr_bonus.c	/^void	ft_rrr_bonus(t_stack *a, t_stack *b)$/;"	f
ft_sa	sources/ft_sa.c	/^void	ft_sa(t_stack *a)$/;"	f
ft_sa_bonus	sources_bonus/ft_sa_bonus.c	/^void	ft_sa_bonus(t_stack *a)$/;"	f
ft_sb	sources/ft_sb.c	/^void	ft_sb(t_stack *b)$/;"	f
ft_sb_bonus	sources_bonus/ft_sb_bonus.c	/^void	ft_sb_bonus(t_stack *b)$/;"	f
ft_second_rr	sources/ft_rr.c	/^void	ft_second_rr(t_stack b)$/;"	f
ft_second_rr_bonus	sources_bonus/ft_rr_bonus.c	/^void	ft_second_rr_bonus(t_stack b)$/;"	f
ft_second_rrr	sources/ft_rrr.c	/^void	ft_second_rrr(t_stack b)$/;"	f
ft_second_rrr_bonus	sources_bonus/ft_rrr_bonus.c	/^void	ft_second_rrr_bonus(t_stack b)$/;"	f
ft_smart_rotate_a	sources/ft_smart_rotate.c	/^void	ft_smart_rotate_a(t_stack *a, int rows)$/;"	f
ft_smart_rotate_b	sources/ft_smart_rotate.c	/^void	ft_smart_rotate_b(t_stack *b, int rows)$/;"	f
ft_smart_rotate_plus_b	sources/ft_smart_rotate_plus.c	/^void	ft_smart_rotate_plus_b(t_stack *a, t_stack *b, int rows)$/;"	f
ft_sort_beyond_hundred	sources/ft_sort_beyond_hundred.c	/^void	ft_sort_beyond_hundred(t_stack *a, t_stack *b)$/;"	f
ft_sort_five	sources/ft_sort.c	/^void	ft_sort_five(t_stack *a, t_stack *b, int i)$/;"	f
ft_sort_four	sources/ft_sort.c	/^void	ft_sort_four(t_stack *a, t_stack *b, int i)$/;"	f
ft_sort_three	sources/ft_sort.c	/^void	ft_sort_three(t_stack *a)$/;"	f
ft_sort_till_five	sources/ft_sort.c	/^void	ft_sort_till_five(t_stack *a, t_stack *b, int i, int argc)$/;"	f
ft_sort_till_hundred	sources/ft_sort_till_hundred.c	/^void	ft_sort_till_hundred(t_stack *a, t_stack *b)$/;"	f
ft_sort_two	sources/ft_sort.c	/^void	ft_sort_two(t_stack *a)$/;"	f
ft_split	libft/ft_split.c	/^char	**ft_split(char *s, char c)$/;"	f
ft_splitter	libft/ft_printf.c	/^static	int	ft_splitter(char const *src, va_list ptr)$/;"	f	file:
ft_ss2_bonus	sources_bonus/ft_ss_bonus.c	/^void	ft_ss2_bonus(t_stack *b)$/;"	f
ft_ss_bonus	sources_bonus/ft_ss_bonus.c	/^void	ft_ss_bonus(t_stack *a, t_stack *b)$/;"	f
ft_stack_is_sorted_bonus	sources_bonus/ft_checks_args_bonus.c	/^int	ft_stack_is_sorted_bonus(t_stack *a)$/;"	f
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(char *ptr, int n)$/;"	f
ft_strchr	libft/get_next_line_utils_bonus.c	/^char	*ft_strchr(char *ptr, int n)$/;"	f
ft_strdup	libft/ft_strdup.c	/^char	*ft_strdup(const char *s1)$/;"	f
ft_striteri	libft/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char*))$/;"	f
ft_strjoin	libft/ft_strjoin.c	/^char	*ft_strjoin(char *ptr, char *buffer)$/;"	f
ft_strjoin	libft/get_next_line_utils_bonus.c	/^char	*ft_strjoin(char *ptr, char *buffer)$/;"	f
ft_strlcat	libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t dstsize)$/;"	f
ft_strlcpy	libft/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t dstsize)$/;"	f
ft_strlen	libft/ft_strlen.c	/^int	ft_strlen(const char *s)$/;"	f
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncmp	libft/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strnstr	libft/ft_strnstr.c	/^char	*ft_strnstr(const char *dst, const char *src, size_t len)$/;"	f
ft_strrchr	libft/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strtrim	libft/ft_strtrim.c	/^char	*ft_strtrim(char *s1, char *set)$/;"	f
ft_substr	libft/ft_substr.c	/^char	*ft_substr(char *s, unsigned int start, unsigned int len)$/;"	f
ft_substr	libft/get_next_line_utils_bonus.c	/^char	*ft_substr(char *s, unsigned int start, unsigned int len)$/;"	f
ft_tolower	libft/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	libft/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
get_next_line	libft/get_next_line_bonus.c	/^char	*get_next_line(int fd)$/;"	f
lenght	includes/push_swap.h	/^	int		lenght;$/;"	m	struct:s_stack
lenght	includes_bonus/push_swap_bonus.h	/^	int		lenght;$/;"	m	struct:s_stack
main	sources/push_swap.c	/^int	main(int argc, char **argv)$/;"	f
main	sources_bonus/checker.c	/^int	main(int argc, char **argv)$/;"	f
next	libft/libft_list.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
numbers	includes/push_swap.h	/^	long	**numbers;$/;"	m	struct:s_stack
numbers	includes_bonus/push_swap_bonus.h	/^	long	**numbers;$/;"	m	struct:s_stack
s_list	libft/libft_list.h	/^typedef struct s_list$/;"	s
s_stack	includes/push_swap.h	/^typedef struct s_stack$/;"	s
s_stack	includes_bonus/push_swap_bonus.h	/^typedef struct s_stack$/;"	s
src_lenght	libft/ft_strlcpy.c	/^static size_t	src_lenght(const char *src)$/;"	f	file:
t_list	libft/libft_list.h	/^}	t_list;$/;"	t	typeref:struct:s_list
t_stack	includes/push_swap.h	/^}	t_stack;$/;"	t	typeref:struct:s_stack
t_stack	includes_bonus/push_swap_bonus.h	/^}	t_stack;$/;"	t	typeref:struct:s_stack
